type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Open Space</title>
    </head>
    <body>
        Hello, World!
    </body>
    </html>
  learner_created: false
- name: hstest/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        let result = await hs.testPage(page,
            //testing structure of the page
            () => {
                let body = document.getElementsByTagName("body")[0];
                if (!(body && body.children.length === 1 &&
                    body.children[0].tagName.toLowerCase() === 'div' &&
                    body.children[0].className === 'space')
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming")

                let space = body.children[0];
                if (!(space.children.length === 2 &&
                    space.children[0].tagName.toLowerCase() === 'div' && space.children[1].tagName.toLowerCase() === 'div' &&
                    ( space.children[0].className === 'planet-area' && space.children[1].className === 'control-panel' ||
                        space.children[1].className === 'planet-area' && space.children[0].className === 'control-panel'))
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming on the space section level")

                let planetArea = document.getElementsByClassName('planet-area')
                if (planetArea.length === 0) {
                    return hs.wrong("Can't find element with class=\"planet-area\"");
                }
                if (!(planetArea[0].children.length === 2 &&
                    planetArea[0].children[0].tagName.toLowerCase() === 'img' &&
                    planetArea[0].children[1].tagName.toLowerCase() === 'img' && (
                        planetArea[0].children[0].className === 'planet' && planetArea[0].children[1].className === 'rocket' ||
                        planetArea[0].children[1].className === 'planet' && planetArea[0].children[0].className === 'rocket'))
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming in planet-area section")

                let controlPanel = document.getElementsByClassName('control-panel');
                if (controlPanel.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel\"");
                }
                let controlPanelInner = Array.from(controlPanel[0].children)[0]
                if (!(controlPanelInner.children.length === 5 &&
                    controlPanelInner.getElementsByTagName('input').length === 14 &&
                    controlPanelInner.getElementsByTagName('div').length === 2
                )) return hs.wrong("There are some mismatches with suggested structure or elements naming in control-panel section")

                return hs.correct()
            },
            //testing types of the check-buttons inputs
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons");
                if (checkBtnsDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"check-buttons\"");
                }
                let checkBtns = Array.from(checkBtnsDiv[0].children);
                checkBtns.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'checkbox') {
                        return hs.wrong('Each element in the check-buttons div should be an input with checkbox type')
                    }
                })

                return hs.correct();
            },
            //testing types of the levers inputs
            () => {
                let leversDiv = document.getElementsByClassName("levers");
                if (leversDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"levers\"");
                }
                let leversInputs = Array.from(leversDiv[0].children);
                leversInputs.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'range') {
                        return hs.wrong('Each element in the levers div should be an input with range type')
                    }
                })

                return hs.correct();
            },
            //testing background of space
            () => {
                let space = document.getElementsByClassName("space");
                if (space.length === 0) {
                    return hs.wrong("Can't find element with class=\"space\"");
                }
                let spaceBg = window.getComputedStyle(space[0]).backgroundImage;
                if (!spaceBg) return hs.wrong("The element with class='space' should have background-image.");

                return hs.correct();
            },
            //testing gradient background of the panel
            () => {
                let controlDeck = document.getElementsByClassName("control-panel")[0];
                let controlDeckBgImg = window.getComputedStyle(controlDeck).backgroundImage;
                if (!controlDeckBgImg.toLowerCase().includes('linear-gradient')) return hs.wrong("The element with class='control-panel' should have gradient background.");

                return hs.correct();
            },
            //testing positioning of check-buttons and levers
            /*display: flex;
        flex-direction: row;*/
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons")[0];
                let leversDiv = document.getElementsByClassName("levers")[0];

                let checkBtnsDivStyles = window.getComputedStyle(checkBtnsDiv);
                let leversDivStyles = window.getComputedStyle(leversDiv);

                if (checkBtnsDivStyles.display.toLowerCase() !== 'flex' || leversDivStyles.display.toLowerCase() !== 'flex') {
                    return hs.wrong('Elements check-buttons and levers should have display: flex property.')
                }

                if (checkBtnsDivStyles.flexDirection.toLowerCase() !== 'row' || leversDivStyles.flexDirection.toLowerCase() !== 'row') {
                    return hs.wrong('Elements check-buttons and levers should be positioned in a row.')
                }

                return hs.correct();
            },
            //testing that levers positioned vertical
            () => {
                let leversDiv = document.getElementsByClassName('levers')[0];
                let levers = Array.from(leversDiv.getElementsByTagName('input'));
                levers.forEach( lever => {
                    let leverStyle = window.getComputedStyle(lever);
                    if (!leverStyle.transform) return hs.wrong("All levers should be vertical.")
                })

                return hs.correct();
            },
            //testing password field
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner');
                if (controlPanelInner.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel__inner\"");
                }
                for(let el of Array.from(controlPanelInner[0].children)){
                    if (el.tagName.toLowerCase() === 'input' && el.type.toLowerCase() === 'password') {
                        let styles = window.getComputedStyle(el);
                        if (styles.color && styles.border ) return  hs.correct()
                        else return hs.wrong("Password field's border and text color should be changed");
                    }
                }

                return hs.wrong("Can't find password field");
            },
            //testing the background color of the "ok" and "launch" buttons
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                let counter = 0;
                for(let el of Array.from(controlPanelInner.children)){
                    if (el.tagName.toLowerCase() === 'input' && (el.type.toLowerCase() === 'submit' || el.type.toLowerCase() === 'button')) {
                        let styles = window.getComputedStyle(el);
                        if (styles.backgroundColor) {
                            counter++;
                        }

                    }
                }

                return counter === 2
                    ? hs.correct()
                    : hs.wrong("Can't find 2 input fields with type=button or submit with changed background");
            },
            //testing the form of the launch button
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                for(let el of Array.from(controlPanelInner.children)){
                    if (el.tagName.toLowerCase() === 'input' && (el.type.toLowerCase() === 'submit' || el.type.toLowerCase() === 'button')) {
                        let styles = window.getComputedStyle(el);
                        if (styles.backgroundColor && styles.borderRadius) {
                            return hs.correct();
                        }
                    }
                }

                return hs.wrong("Can't find the input with type=button or submit with specified border-radius");
            },
            //testing that all inputs except password and the "ok" button sre disabled
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                for (el of Array.from(controlPanelInner.getElementsByTagName('input'))) {
                    if(el.type.toLowerCase() === "password" && el.disabled) {
                        return hs.wrong("Password field should be enabled.")
                    }

                    if(el.value.toLowerCase() === "ok" && el.disabled) {
                            return hs.wrong("Ok button should be enabled.");
                    }

                    if (el.type.toLowerCase() !== "password" &&
                        el.value.toLowerCase() !== "ok"  && !el.disabled) {
                            return hs.wrong("All inputs except password and the ok button should be disabled.");
                    }
                }

                return hs.correct();
            },
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                let allInputs = Array.from(controlPanelInner.getElementsByTagName('input'));
                let passwordEl =allInputs.filter( el => el.type.toLowerCase() === "password");

                passwordEl[0].value = "TrustNo1";
                window.setTimeout(() => {
                    for (el of allInputs) {
                        if(el.type.toLowerCase() === "password" && !el.disabled) {
                            return hs.wrong("Password field should be disabled.")
                        }

                        if(el.value.toLowerCase() === "ok" && !el.disabled) {
                            return hs.wrong("Ok button should be disabled.");
                        }

                        if (el.type.toLowerCase() !== "password" &&
                            el.value.toLowerCase() !== "ok"  && el.disabled) {
                            return hs.wrong("All inputs except password and the ok button should be enabled.");
                        }
                    }
                }, 1000)

                return hs.correct();
            }

        )

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/main.js
  visible: true
  text: |
    let inputs = document.getElementsByTagName("input");
    inputs.forEach(input => input.disabled = true);
  learner_created: true
- name: src/style.css
  visible: true
  text: |
    body {
        margin: 0;
        padding: 0;
        background-image: url("img/space.png");
        overflow: hidden;
    }

    .planet {
        position: absolute;
        left: -10px;
        bottom: -10px;
    }

    .rocket {
        width: 200px;
        position: absolute;
        top: 700px;
        left: 530px;
        transform: rotateZ(25deg);
    }

    .control-panel {
        position: absolute;
        right: 200px;
        bottom: 100px;
        width: 800px;
        padding: 10px;
        background:
                radial-gradient(circle farthest-side at 0% 50%,#fb1 23.5%,rgba(240,166,17,0) 0)21px 30px,
                radial-gradient(circle farthest-side at 0% 50%,#B71 24%,rgba(240,166,17,0) 0)19px 30px,
                linear-gradient(#fb1 14%,rgba(240,166,17,0) 0, rgba(240,166,17,0) 85%,#fb1 0)0 0,
                linear-gradient(150deg,#fb1 24%,#B71 0,#B71 26%,rgba(240,166,17,0) 0,rgba(240,166,17,0) 74%,#B71 0,#B71 76%,#fb1 0)0 0,
                linear-gradient(30deg,#fb1 24%,#B71 0,#B71 26%,rgba(240,166,17,0) 0,rgba(240,166,17,0) 74%,#B71 0,#B71 76%,#fb1 0)0 0,
                linear-gradient(90deg,#B71 2%,#fb1 0,#fb1 98%,#B71 0%)0 0 #fb1;
        background-size: 40px 60px;
    }

    .control-panel__inner {
        padding: 10px 50px;
        box-sizing: border-box;
        background-color: #262222;
    }

    .check-buttons {
        display: flex;
        justify-content: space-between;
        margin: 15px 0;
    }

    .levers {
        display: flex;
        justify-content: space-between;
        margin: 15px 0;
    }

    input[type=range] {
        -webkit-appearance: slider-vertical;
    }

    input[type=password] {
        background-color: darkgrey;
        border: 1px solid yellow;
    }

    .button-launch {
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        background-color: red;
        border: 1px solid black;
    }

    .button-ok {
        background-color: yellow;
        border: 1px solid black;
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/143/stages/774/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 13 May 2021 16:35:58 UTC
record: 4
